{"version":3,"sources":["modules/quiz/question/question.module.scss","modules/quiz/question-list/question-list.module.scss","routes/video-quiz/video-quiz.module.scss","modules/quiz/submission-view/submission-view.component.tsx","modules/quiz/question-list/question-item.component.tsx","modules/quiz/question-list/question-list.component.tsx","modules/quiz/question/question-helper.component.tsx","modules/quiz/question/unit-answer.component.tsx","modules/quiz/question/screenshot.utility.ts","modules/quiz/question/question.component.tsx","routes/video-quiz/video-quiz.component.tsx"],"names":["module","exports","processAnswer","answer","media","Array","isArray","forEach","m","url","substr","SubmissionView","useContext","QuizContext","answeredCount","questions","getQuestionsList","question","ans","length","type","message","description","src","collapsed","Paragraph","Typography","badgeStyle","left","right","QuestionNo","QueNo","className","flagged","styles","isFlagged","isNotFlagged","questionNo","answerType","count","badgeIcon","style","QuestionItem","item","questionItem","questionBody","tags","map","tag","color","key","gutter","Search","Input","Option","Select","QuestionList","search","activeQuestionId","setActiveQuestionId","useState","showSubmitModal","setShowSubmitModal","query","setQuery","filterTags","setFilterTags","BooleanFilter","BOTH","filterCritical","setFilterCritical","filterFlag","setFilterFlag","results","setResults","useEffect","onClick","useCallback","id","openModal","closeModal","isNotSubmittable","container","filterContainer","xs","placeholder","onSearch","enterButton","label","mode","onChange","value","select","TRUE","FALSE","questionList","hoverable","size","card","active","submitBtnContainer","block","danger","title","onCancel","visible","destroyOnClose","width","footer","TextArea","PlayerTime","time","player","playerSeek","undefined","currentTime","pause","timeInSec","Math","round","min","String","floor","padStart","sec","formatVideoTime","TextAreaInput","setValue","extra","e","target","headingWithExtras","marginBottom","rows","TextAreaRead","autoSize","readOnly","textAreaAnswer","Tags","UnitAnswer","questionIdx","setModelDocket","remark","setRemark","answerTxt","setAnswerTxt","setMedia","onSave","timestamp","saveScreenshot","el","querySelector","hasStarted","video","canvas","document","createElement","context","getContext","w","videoWidth","h","videoHeight","height","fillRect","drawImage","toDataURL","getScreenshot","notification","warn","newMedia","v4","prevState","error","loadNext","loadPrev","sm","md","questionType","Group","options","opt","option","docket","icon","screenshotBtnContainer","ghost","disabled","shape","questionNavContainer","getNewAnswer","QuestionComponent","getQuestionById","updateQuestion","setQuestion","setAnswer","updatedAnswer","prevAnswers","isUpdate","some","u","changeFlagged","que","console","log","optionMap","useMemo","refIndex","questionContainer","isCritical","checked","checkedChildren","unCheckedChildren","marginVertical","prevAnswer","Item","VideoQuiz","videoUrl","setPlayer","videoRef","useRef","current","videoJsPlayer","videojs","autoplay","controls","sources","markers","markerStyle","prev","dispose","push","sort","newMarkers","t","text","reset","split","minSize","defaultSize","maxSize","primary","pane2Style","overflow","data-vjs-player","ref","crossOrigin","questionContent"],"mappings":"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","file":"static/js/4.fd76e3c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"questionContainer\":\"question_questionContainer__35IEG\",\"marginVertical\":\"question_marginVertical__qQ9YO\",\"option\":\"question_option__1AgUQ\",\"label\":\"question_label__27iWB\",\"marginBottom\":\"question_marginBottom__3q9BH\",\"textAreaAnswer\":\"question_textAreaAnswer__2ohmD\",\"headingWithExtras\":\"question_headingWithExtras__13RsD\",\"screenshotBtnContainer\":\"question_screenshotBtnContainer__t34-l\",\"submitBtnContainer\":\"question_submitBtnContainer__3s-T1\",\"questionNavContainer\":\"question_questionNavContainer__10YoL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"question-list_container__1GsJq\",\"filterContainer\":\"question-list_filterContainer__jozvT\",\"select\":\"question-list_select__3LPv3\",\"label\":\"question-list_label__8mPAt\",\"submitBtnContainer\":\"question-list_submitBtnContainer__32m2p\",\"badgeIcon\":\"question-list_badgeIcon__UJ9qD\",\"questionList\":\"question-list_questionList__1sm9W\",\"card\":\"question-list_card__apC3n\",\"isFlagged\":\"question-list_isFlagged__1W8DO\",\"isNotFlagged\":\"question-list_isNotFlagged__Bumfe\",\"active\":\"question-list_active__4kEvV\",\"questionItem\":\"question-list_questionItem__2UhmG\",\"questionBody\":\"question-list_questionBody__jH6c_\",\"tag\":\"question-list_tag__3ikYh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"video-quiz_container__2djgE\",\"questionContent\":\"video-quiz_questionContent__Ige9r\",\"questionList\":\"video-quiz_questionList__34cNv\"};","import { Alert } from 'antd'\nimport React, { FC, useContext } from 'react'\nimport ReactJson from 'react-json-view'\nimport { AnswerType, DocketType } from '../../../types/qna.types'\n\nimport QuizContext from '../quiz.context'\n\nconst processAnswer = (answer?: AnswerType) => {\n  if (answer && answer.media && Array.isArray(answer.media)) {\n    answer.media.forEach((m) => {\n      m.url = m.url.substr(0, 50) + '...'\n    })\n  }\n}\n\nconst SubmissionView: FC<{}> = () => {\n  const { answeredCount, getQuestionsList } = useContext(QuizContext)\n  const questions = getQuestionsList()\n  questions.forEach((question) => {\n    if (Array.isArray(question.answer)) {\n      question.answer.forEach((ans) => {\n        processAnswer(ans)\n      })\n    } else {\n      processAnswer(question.answer)\n    }\n  })\n  return (\n    <section>\n      {answeredCount < questions.length ? (\n        <Alert\n          type=\"warning\"\n          message=\"Can not submit.\"\n          description=\"All the questions are not answered\"\n        />\n      ) : null}\n      <ReactJson src={questions} collapsed />\n    </section>\n  )\n}\n\nexport default SubmissionView\n","import {\n  CheckCircleFilled,\n  CheckCircleOutlined,\n  CheckOutlined,\n} from '@ant-design/icons/lib'\nimport { Avatar, Badge, Tag, Typography } from 'antd'\nimport React, { FC } from 'react'\nimport { QuestionType } from '../../../types/qna.types'\nimport { QuestionTypeSearch } from '../quiz.types'\n\nimport styles from './question-list.module.scss'\n\nexport type QuestionItemProps = {\n  question: QuestionTypeSearch\n}\nconst { Paragraph } = Typography\n\nconst badgeStyle: React.CSSProperties = {\n  left: '-40%',\n  right: 'auto',\n}\n\nconst QuestionNo: FC<{ question: QuestionType }> = ({ question }) => {\n  const QueNo = (\n    <Avatar\n      className={question.flagged ? styles.isFlagged : styles.isNotFlagged}\n    >\n      {question.questionNo}\n    </Avatar>\n  )\n  if (question.answerType === 'SINGLE' && question.answer) {\n    return (\n      <Badge\n        count={<CheckCircleFilled className={styles.badgeIcon} />}\n        style={badgeStyle}\n      >\n        {QueNo}\n      </Badge>\n    )\n  } else if (\n    question.answerType === 'MULTI' &&\n    Array.isArray(question.answer) &&\n    question.answer.length\n  ) {\n    return (\n      <Badge style={badgeStyle} count={question.answer.length}>\n        {QueNo}\n      </Badge>\n    )\n  }\n  return QueNo\n}\n\nconst QuestionItem: FC<QuestionItemProps> = ({ question: { item } }) => {\n  return (\n    <div className={styles.questionItem}>\n      <QuestionNo question={item} />\n      <div>\n        <Paragraph className={styles.questionBody}>\n          {item.questionBody}\n        </Paragraph>\n        <div>\n          {item.tags?.map((tag) => (\n            <Tag color=\"blue\" key={tag} className={styles.tag}>\n              {tag}\n            </Tag>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default QuestionItem\n","import { Alert, Button, Card, Col, Input, Modal, Row, Select } from 'antd'\nimport React, {\n  FC,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport QuizContext from '../quiz.context'\nimport SubmissionView from '../submission-view/submission-view.component'\nimport QuestionItem from './question-item.component'\nimport styles from './question-list.module.scss'\nimport { BooleanFilter, QuestionTypeSearch } from '../quiz.types'\n\nexport type QuestionListProps = {}\n\nconst gutter: [number, number] = [12, 12]\nconst { Search } = Input\nconst { Option } = Select\nconst QuestionList: FC<QuestionListProps> = () => {\n  const {\n    search,\n    tags,\n    activeQuestionId,\n    setActiveQuestionId,\n    answeredCount,\n    questions,\n  } = useContext(QuizContext)\n  const [showSubmitModal, setShowSubmitModal] = useState(false)\n  const [query, setQuery] = useState('')\n  const [filterTags, setFilterTags] = useState<string[]>([])\n  const [filterCritical, setFilterCritical] = useState<BooleanFilter>(\n    BooleanFilter.BOTH\n  )\n  const [filterFlag, setFilterFlag] = useState<BooleanFilter>(\n    BooleanFilter.BOTH\n  )\n  const [results, setResults] = useState<QuestionTypeSearch[]>([])\n  useEffect(() => {\n    const results = search({\n      query,\n      filterTags,\n      filterCritical,\n      filterFlag,\n    })\n    setResults(results)\n  }, [filterCritical, filterFlag, filterTags, query, search])\n  const onClick = useCallback(\n    (id: string) => {\n      if (id) {\n        setActiveQuestionId(id)\n      }\n    },\n    [setActiveQuestionId]\n  )\n  const openModal = useCallback(() => {\n    setShowSubmitModal(true)\n  }, [])\n  const closeModal = useCallback(() => {\n    setShowSubmitModal(false)\n  }, [])\n  const isNotSubmittable = answeredCount < questions.length\n  return (\n    <section className={styles.container}>\n      <Row gutter={gutter} className={styles.filterContainer}>\n        <Col xs={24}>\n          <Search placeholder=\"search query\" onSearch={setQuery} enterButton />\n        </Col>\n        <Col xs={12}>\n          <span className={styles.label}>Tags</span>\n          <Select\n            mode=\"multiple\"\n            placeholder=\"Select tags\"\n            onChange={setFilterTags}\n            value={filterTags}\n            className={styles.select}\n          >\n            {tags.map((tag) => (\n              <Option key={tag} value={tag}>\n                {tag}\n              </Option>\n            ))}\n          </Select>\n        </Col>\n        <Col xs={6}>\n          <span className={styles.label}>Critical</span>\n          <Select\n            placeholder=\"Select Flag\"\n            onChange={setFilterCritical as any}\n            className={styles.select}\n            value={filterCritical}\n          >\n            <Option value={BooleanFilter.BOTH}>All</Option>\n            <Option value={BooleanFilter.TRUE}>Critical</Option>\n            <Option value={BooleanFilter.FALSE}>Non-Critical</Option>\n          </Select>\n        </Col>\n        <Col xs={6}>\n          <span className={styles.label}>Flag</span>\n          <Select\n            placeholder=\"Select Flag\"\n            onChange={setFilterFlag as any}\n            className={styles.select}\n            value={filterFlag}\n          >\n            <Option value={BooleanFilter.BOTH}>All</Option>\n            <Option value={BooleanFilter.TRUE}>Flagged</Option>\n            <Option value={BooleanFilter.FALSE}>UnFlagged</Option>\n          </Select>\n        </Col>\n      </Row>\n      <div className={styles.questionList}>\n        {results.map((question) => (\n          <Card\n            hoverable\n            size=\"small\"\n            className={`${styles.card} ${\n              question.item.flagged ? styles.isFlagged : styles.isNotFlagged\n            } ${activeQuestionId === question.item.id ? styles.active : ''}`}\n            key={question.item.id}\n            onClick={() => onClick(question.item.id)}\n          >\n            <QuestionItem question={question} />\n          </Card>\n        ))}\n        {results.length === 0 ? (\n          <Alert\n            type=\"warning\"\n            message=\"No results to show\"\n            description=\"Remove applied filters/query to view questions\"\n          />\n        ) : null}\n      </div>\n      <div className={styles.submitBtnContainer}>\n        <Button\n          type={isNotSubmittable ? 'default' : 'primary'}\n          block\n          danger={isNotSubmittable}\n          onClick={openModal}\n        >\n          {isNotSubmittable ? 'Answered' : 'Submit'} ({answeredCount} /\n          {questions.length})\n        </Button>\n        <Modal\n          title=\"Submission\"\n          onCancel={closeModal}\n          visible={showSubmitModal}\n          destroyOnClose\n          width=\"80%\"\n          footer={null}\n        >\n          <SubmissionView />\n        </Modal>\n      </div>\n    </section>\n  )\n}\n\nexport default QuestionList\n","import { Button, Input, Tag } from 'antd'\nimport React, { FC, useCallback, useContext } from 'react'\nimport QuizContext from '../quiz.context'\nimport styles from './question.module.scss'\n\nconst { TextArea } = Input\nexport const formatVideoTime = (timeInSec = 0) => {\n  const time = Math.round(timeInSec)\n  const min = String(Math.floor(time / 60)).padStart(2, '0')\n  const sec = String(time % 60).padStart(2, '0')\n  return ` ${min}:${sec}`\n}\n\nexport const PlayerTime: FC<{ time?: number }> = ({ time }) => {\n  const { player } = useContext(QuizContext)\n  const playerSeek = useCallback(\n    (time?: number) => {\n      if (player && time !== undefined) {\n        player.currentTime(time)\n        player.pause()\n      }\n    },\n    [player]\n  )\n  return (\n    <div>\n      <span className={styles.label}>Recorded At : </span>\n      <Button type=\"link\" onClick={() => playerSeek(time)}>\n        {formatVideoTime(time)}\n      </Button>\n    </div>\n  )\n}\n\nexport const TextAreaInput: FC<{\n  label: string\n  placeholder?: string\n  value?: string\n  setValue: (value: string) => void\n  extra?: JSX.Element | null\n}> = ({\n  value,\n  setValue,\n  label,\n  extra,\n  placeholder = 'Enter your response here',\n}) => {\n  const onChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      setValue(e.target.value)\n    },\n    [setValue]\n  )\n  return (\n    <div>\n      <div className={styles.headingWithExtras}>\n        <span className={`${styles.label} ${styles.marginBottom}`}>\n          {label}\n        </span>\n        {extra}\n      </div>\n      <TextArea\n        rows={4}\n        value={value}\n        placeholder={placeholder}\n        onChange={onChange}\n      />\n    </div>\n  )\n}\n\nexport const TextAreaRead: FC<{ value?: string | null; label: string }> = ({\n  value,\n  label,\n}) => {\n  if (!value) return null\n  return (\n    <div>\n      <span className={styles.label}>{label}</span>\n      <TextArea\n        autoSize\n        value={value}\n        readOnly\n        className={styles.textAreaAnswer}\n      />\n    </div>\n  )\n}\n\nexport const Tags: FC<{ tags?: string[] }> = ({ tags }) => {\n  if (!tags) return null\n  return (\n    <>\n      {tags.map((tag) => (\n        <Tag key={tag} color=\"blue\">\n          {tag}\n        </Tag>\n      ))}\n    </>\n  )\n}\n","import {\n  CameraOutlined,\n  FileOutlined,\n  LeftOutlined,\n  RightOutlined,\n  SaveOutlined,\n} from '@ant-design/icons/lib'\nimport { Button, Col, Input, notification, Radio, Row, Space } from 'antd'\nimport React, { FC, useCallback, useContext, useEffect, useState } from 'react'\nimport { v4 } from 'uuid'\nimport { AnswerType, DocketType, QuestionType } from '../../../types/qna.types'\nimport QuizContext from '../quiz.context'\nimport { PlayerTime, TextAreaInput } from './question-helper.component'\nimport styles from './question.module.scss'\nimport { getScreenshot } from './screenshot.utility'\n\nexport type UnitAnswerProps = {\n  question: QuestionType\n  questionIdx: number\n  answer: AnswerType\n  onChange: (updatedAnswer: AnswerType) => void\n}\nconst gutter: [number, number] = [16, 16]\nconst { TextArea } = Input\n\nconst UnitAnswer: FC<UnitAnswerProps> = ({\n  question,\n  answer,\n  onChange,\n  questionIdx,\n}) => {\n  const { questions, setActiveQuestionId, setModelDocket, player } = useContext(\n    QuizContext\n  )\n  const [remark, setRemark] = useState(answer.remark)\n  const [answerTxt, setAnswerTxt] = useState(answer.answer)\n  const [media, setMedia] = useState<DocketType[] | undefined>(answer.media)\n  const onSave = useCallback(() => {\n    onChange({\n      ...answer,\n      remark,\n      media,\n      answer: answerTxt,\n      timestamp: player?.currentTime(),\n    })\n  }, [onChange, answer, remark, media, answerTxt, player])\n\n  const saveScreenshot = useCallback(() => {\n    const container = player?.el()\n    const el = container?.querySelector('video')\n    if (!el) {\n      notification.error({ message: 'Could not find Video' })\n      return\n    }\n    if (player?.hasStarted()) {\n      const url = getScreenshot(el)\n      if (url === null) {\n        notification.warn({ message: 'Could not get Image Url' })\n        return\n      }\n      const newMedia: DocketType = {\n        id: v4(),\n        url,\n        type: 'image/jpeg',\n        title: `Screenshot at ${player?.currentTime()}`,\n      }\n      setMedia((prevState) => {\n        if (Array.isArray(prevState)) {\n          return [...prevState, newMedia]\n        }\n        return [newMedia]\n      })\n    } else {\n      notification.warn({\n        message: 'Can not take screenshot.',\n        description: 'You can not take screenshot before video has started',\n      })\n    }\n  }, [player])\n\n  const loadNext = useCallback(() => {\n    if (questionIdx < questions.length) {\n      setActiveQuestionId(questions[questionIdx + 1].id)\n    }\n  }, [questions, setActiveQuestionId, questionIdx])\n  const loadPrev = useCallback(() => {\n    if (questionIdx > 0) {\n      setActiveQuestionId(questions[questionIdx - 1].id)\n    }\n  }, [questions, setActiveQuestionId, questionIdx])\n\n  useEffect(() => {\n    setRemark(answer.remark || '')\n    setAnswerTxt(answer.answer || '')\n    setMedia(answer.media)\n  }, [answer])\n\n  return (\n    <>\n      <Row gutter={gutter}>\n        <Col sm={24} md={12}>\n          {question.questionType === 'TEXT' ? (\n            <TextAreaInput\n              value={answerTxt}\n              label=\"Your Answer\"\n              setValue={setAnswerTxt}\n            />\n          ) : null}\n          {question.questionType === 'MULTI_CHOICE' ? (\n            <div>\n              <span className={`${styles.label} ${styles.marginBottom}`}>\n                Options\n              </span>\n              <div>\n                <Radio.Group\n                  value={answerTxt}\n                  onChange={(e) => setAnswerTxt(e.target.value)}\n                >\n                  {question.options.map((opt) => (\n                    <Radio\n                      key={opt.id}\n                      value={opt.id}\n                      className={styles.option}\n                    >\n                      {opt.label}\n                    </Radio>\n                  ))}\n                </Radio.Group>\n              </div>\n            </div>\n          ) : null}\n        </Col>\n        <Col sm={24} md={12}>\n          <TextAreaInput\n            value={remark}\n            label=\"Remarks\"\n            placeholder=\"Enter additional remarks here ...\"\n            setValue={setRemark}\n            extra={\n              question.docket?.length ? (\n                <Button\n                  type=\"link\"\n                  icon={<FileOutlined />}\n                  size=\"small\"\n                  onClick={() =>\n                    question.docket &&\n                    setModelDocket(question.docket, 'View Dockets')\n                  }\n                >\n                  View Dockets ({question.docket.length})\n                </Button>\n              ) : null\n            }\n          />\n          <Space className={styles.screenshotBtnContainer}>\n            <Button\n              type=\"primary\"\n              ghost\n              icon={<CameraOutlined />}\n              size=\"small\"\n              onClick={saveScreenshot}\n              // disabled={!player?.hasStarted()}\n            >\n              Attach Screenshot\n            </Button>\n            <Button\n              type=\"primary\"\n              ghost\n              icon={<CameraOutlined />}\n              size=\"small\"\n              disabled={!media?.length}\n              onClick={() =>\n                media && setModelDocket(media, 'View Current Screenshot')\n              }\n            >\n              View Screenshot ({media?.length || 0})\n            </Button>\n          </Space>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={8}>\n          {answer.timestamp !== undefined ? (\n            <PlayerTime time={answer.timestamp} />\n          ) : null}\n        </Col>\n        <Col sm={8} className={styles.submitBtnContainer}>\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            icon={<SaveOutlined />}\n            onClick={onSave}\n            disabled={!answerTxt}\n          >\n            Save Answer\n          </Button>\n        </Col>\n        <Col sm={8} className={styles.questionNavContainer}>\n          <Button\n            type=\"link\"\n            icon={<LeftOutlined />}\n            disabled={questionIdx <= 0}\n            onClick={loadPrev}\n          />\n          <Button type=\"text\">\n            {questionIdx + 1} / {questions.length}\n          </Button>\n          <Button\n            type=\"link\"\n            icon={<RightOutlined />}\n            disabled={questionIdx >= questions.length - 1}\n            onClick={loadNext}\n          />\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nexport default UnitAnswer\n","export function getScreenshot(video: HTMLVideoElement): string | null {\n  const canvas = document.createElement('canvas')\n  const context = canvas.getContext('2d')\n  const w = video.videoWidth\n  const h = video.videoHeight\n  canvas.width = w\n  canvas.height = h\n  if (context) {\n    context.fillRect(0, 0, w, h)\n    context.drawImage(video, 0, 0, w, h)\n    const dataUrl = canvas.toDataURL('image/jpeg')\n    return dataUrl\n  }\n  return null\n}\n","import {\n  CameraOutlined,\n  EditOutlined,\n  FlagOutlined,\n} from '@ant-design/icons/lib'\nimport {\n  Alert,\n  Button,\n  Card,\n  Input,\n  Space,\n  Switch,\n  Tag,\n  Timeline,\n  Tooltip,\n  Typography,\n} from 'antd'\nimport React, {\n  FC,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport { v4 } from 'uuid'\nimport { AnswerType } from '../../../types/qna.types'\nimport QuizContext from '../quiz.context'\nimport { QuestionTypeSearch } from '../quiz.types'\nimport { PlayerTime, Tags, TextAreaRead } from './question-helper.component'\nimport UnitAnswer from './unit-answer.component'\nimport styles from './question.module.scss'\n\nexport type QuestionProps = {}\n\nconst getNewAnswer = (): AnswerType => ({\n  id: v4(),\n  answer: '',\n  remark: '',\n  media: [],\n  timestamp: undefined,\n})\n\nconst { Paragraph } = Typography\nconst { TextArea } = Input\nconst QuestionComponent: FC<QuestionProps> = () => {\n  const {\n    getQuestionById,\n    updateQuestion,\n    activeQuestionId,\n    setModelDocket,\n    player,\n  } = useContext(QuizContext)\n  const [question, setQuestion] = useState<QuestionTypeSearch | undefined>()\n  const [answer, setAnswer] = useState(getNewAnswer())\n\n  const onSave = useCallback(\n    (updatedAnswer: AnswerType) => {\n      if (!question) return\n      if (question.item.answerType === 'SINGLE') {\n        question.item.answer = updatedAnswer\n      } else if (question.item.answerType === 'MULTI') {\n        const prevAnswers = question.item.answer || []\n        const isUpdate = prevAnswers.some((u) => u.id === updatedAnswer.id)\n        if (!isUpdate) {\n          question.item.answer = [...prevAnswers, updatedAnswer]\n        } else {\n          question.item.answer = prevAnswers.map((u) =>\n            u.id === updatedAnswer.id ? updatedAnswer : u\n          )\n        }\n      }\n      updateQuestion(question.item.id, question.item)\n    },\n    [question, updateQuestion]\n  )\n\n  const changeFlagged = useCallback(\n    (isFlagged: boolean) => {\n      if (question && question.item.flagged !== isFlagged) {\n        question.item.flagged = isFlagged\n        updateQuestion(question.item.id, question.item)\n      }\n    },\n    [question, updateQuestion]\n  )\n\n  useEffect(() => {\n    if (activeQuestionId) {\n      const que = getQuestionById(activeQuestionId)\n      setQuestion(que)\n      console.log('Answer', que?.item.answer)\n      if (que?.item.answerType === 'SINGLE') {\n        setAnswer(que.item.answer || getNewAnswer())\n      } else {\n        setAnswer(getNewAnswer())\n      }\n    } else {\n      setQuestion(undefined)\n      setAnswer(getNewAnswer())\n    }\n  }, [activeQuestionId, getQuestionById])\n  const optionMap: Record<string, string> = useMemo(() => {\n    if (question?.item.questionType === 'MULTI_CHOICE') {\n      const map: Record<string, string> = {}\n      question.item.options.map((u) => {\n        map[u.id] = u.label\n      })\n      return map\n    }\n    return {}\n  }, [question])\n  if (!question) return null\n  const { refIndex, item: que } = question\n\n  return (\n    <section className={styles.questionContainer}>\n      <Card\n        size=\"small\"\n        title={`Question No: ${que.questionNo}`}\n        extra={\n          <Space>\n            <Tags tags={que.tags} />\n            {que.isCritical ? (\n              <Tag color=\"error\">Critical</Tag>\n            ) : (\n              <Tag>Non Critical</Tag>\n            )}\n            <Tooltip title={que.flagged ? 'Flagged' : 'Not Flagged'}>\n              <Switch\n                checked={que.flagged}\n                checkedChildren={<FlagOutlined />}\n                unCheckedChildren={<FlagOutlined />}\n                onChange={changeFlagged}\n              />\n            </Tooltip>\n          </Space>\n        }\n      >\n        <Paragraph>{que.questionBody}</Paragraph>\n        <UnitAnswer\n          question={que}\n          answer={answer}\n          onChange={onSave}\n          questionIdx={refIndex}\n        />\n      </Card>\n      {que.answerType === 'MULTI' ? (\n        <Card\n          size=\"small\"\n          title=\"Previous Answers\"\n          className={styles.marginVertical}\n        >\n          {!que.answer?.length ? (\n            <Alert type=\"info\" message=\"No Answers recorded yet.\" />\n          ) : null}\n          <Timeline>\n            {Array.isArray(que.answer)\n              ? que.answer.map((prevAnswer) => (\n                  <Timeline.Item>\n                    <PlayerTime time={prevAnswer.timestamp} />\n                    {question?.item.questionType === 'TEXT' ? (\n                      <TextAreaRead label=\"Answer\" value={prevAnswer.answer} />\n                    ) : null}\n                    {question?.item.questionType === 'MULTI_CHOICE' ? (\n                      <div>\n                        <span className={styles.label}>Option Selected :</span>\n                        <span>{optionMap[prevAnswer.answer]}</span>\n                      </div>\n                    ) : null}\n                    <TextAreaRead label=\"Remarks\" value={prevAnswer.remark} />\n                    <Space className={styles.marginVertical}>\n                      <Button\n                        icon={<CameraOutlined />}\n                        size=\"small\"\n                        onClick={() =>\n                          prevAnswer.media &&\n                          setModelDocket(prevAnswer.media, 'View Screenshots')\n                        }\n                        disabled={!prevAnswer.media?.length}\n                      >\n                        View Screenshots ({prevAnswer.media?.length || 0})\n                      </Button>\n                      <Button\n                        icon={<EditOutlined />}\n                        size=\"small\"\n                        onClick={() => setAnswer(prevAnswer)}\n                      >\n                        Edit\n                      </Button>\n                    </Space>\n                  </Timeline.Item>\n                ))\n              : null}\n          </Timeline>\n        </Card>\n      ) : null}\n    </section>\n  )\n}\n\nexport default QuestionComponent\n","import React, { FC, useContext, useEffect, useRef } from 'react'\nimport SplitPane from 'react-split-pane'\nimport videojs from 'video.js'\nimport 'videojs-markers'\nimport QuestionList from '../../modules/quiz/question-list/question-list.component'\nimport Question from '../../modules/quiz/question/question.component'\nimport QuizContext from '../../modules/quiz/quiz.context'\n\nimport styles from './video-quiz.module.scss'\n\ndeclare module 'video.js' {\n  export interface VideoJsPlayer {\n    // markers(options: any): void\n    markers: VideoJsMarkerPlugin\n  }\n  export interface VideoJsMarkerPlugin {\n    add(newMarkers: any): void\n    destroy(): void\n    getMarkers(): void\n    next(): void\n    prev(): void\n    remove(indexArray: any): void\n    removeAll(): void\n    reset(newMarkers: any): void\n    updateTime(force: any): void\n  }\n}\n\nconst VideoQuiz: FC<{}> = () => {\n  const {\n    videoUrl,\n    setPlayer,\n    activeQuestionId,\n    player,\n    getQuestionById,\n  } = useContext(QuizContext)\n  const videoRef = useRef(null)\n\n  useEffect(() => {\n    if (videoRef.current === null) return\n    const videoJsPlayer = videojs(videoRef.current, {\n      autoplay: false,\n      controls: true,\n\n      sources: [\n        {\n          src: videoUrl,\n          type: 'video/mp4',\n        },\n      ],\n    })\n    const x: any = videoJsPlayer\n    x.markers({\n      markers: [],\n      markerStyle: {\n        width: '8px',\n        'background-color': '#ff4d4f',\n      },\n    })\n    setPlayer(videoJsPlayer)\n    return () => {\n      setPlayer((prev) => {\n        if (prev) {\n          prev.dispose()\n        }\n        return null\n      })\n    }\n  }, [setPlayer, videoRef, videoUrl])\n\n  // update markers for selected question\n  useEffect(() => {\n    if (!player || !player.markers) return undefined\n    const question = getQuestionById(activeQuestionId)\n    if (!question) return\n    const { item } = question\n    const time = []\n\n    if (item.answerType === 'SINGLE' && item.answer?.timestamp !== undefined) {\n      time.push(item.answer.timestamp)\n    } else if (item.answerType === 'MULTI' && Array.isArray(item.answer)) {\n      item.answer.forEach((ans) => {\n        if (ans.timestamp !== undefined) {\n          time.push(ans.timestamp)\n        }\n      })\n    }\n    time.sort()\n    const newMarkers = time.map((t) => ({\n      time: t,\n      text: 'Recorded',\n      // duration: 10,\n    }))\n    player.markers.reset(newMarkers)\n  }, [activeQuestionId, getQuestionById, player])\n  return (\n    <section className={styles.container}>\n      <SplitPane\n        split=\"vertical\"\n        minSize={350}\n        defaultSize={350}\n        maxSize={900}\n        primary=\"second\"\n      >\n        <SplitPane\n          split=\"horizontal\"\n          minSize={200}\n          defaultSize={400}\n          maxSize={700}\n          pane2Style={{ overflow: 'hidden' }}\n        >\n          <div data-vjs-player>\n            <video\n              ref={videoRef}\n              className=\"video-js vjs-big-play-centered\"\n              crossOrigin=\"anonymous\"\n            />\n          </div>\n          <div className={styles.questionContent}>\n            <Question />\n          </div>\n        </SplitPane>\n        <div className={styles.questionList}>\n          <QuestionList />\n        </div>\n      </SplitPane>\n    </section>\n  )\n}\n\nexport default VideoQuiz\n"],"sourceRoot":""}