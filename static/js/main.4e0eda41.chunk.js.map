{"version":3,"sources":["components/player/player.component.tsx","modules/quiz/docket/docket.component.tsx","modules/quiz/quiz.utility.ts","modules/quiz/quiz.context.tsx","components/nav-bar/nav-bar.component.tsx","components/full-screen-loader/full-screen-loader.component.tsx","constants/question.constant.ts","constants/video.ts","routes/not-found/not-found.index.ts","routes/video-quiz/video-quiz.index.ts","routes/routes.component.tsx","app.component.tsx","serviceWorker.ts","index.tsx","modules/quiz/quiz.types.ts","components/full-screen-loader/full-screen-loader.module.scss","modules/quiz/docket/docket.module.scss"],"names":["Player","url","type","videoRef","useRef","useEffect","current","videoJsPlayer","videojs","autoplay","controls","sources","src","dispose","data-vjs-player","style","height","ref","className","crossOrigin","TabPane","Tabs","RenderType","docket","width","startsWith","styles","center","image","alt","title","Docket","dockets","defaultActiveKey","map","key","id","tab","getFuseInstance","questions","Fuse","includeScore","includeMatches","keys","getTags","tagSet","Set","forEach","tags","Array","isArray","length","tag","add","from","booleanFilter","booleanValue","BooleanFilter","BOTH","TRUE","FALSE","defaultValue","videoUrl","activeQuestionId","player","answeredCount","setPlayer","setActiveQuestionId","setModelDocket","search","getQuestionById","updateQuestion","getQuestionsList","QuizContext","createContext","modalBodyStyle","padding","QuizContextProvider","children","useState","modelConfig","setModelConfig","Map","question","set","generateQuestionMap","questionMap","setQuestionMap","useMemo","fuse","useCallback","item","get","refIndex","findIndex","que","score","prevMap","query","filterTags","filterCritical","filterFlag","results","filter","Boolean","isCritical","flagged","some","includes","filterQuestions","fuseIndex","u","undefined","matches","q","idx","filterQuestionBasedOnQuery","trim","visible","reduce","total","withAnswer","answer","answerType","closeModal","pre","afterClosed","value","Provider","footer","onCancel","afterClose","bodyStyle","destroyOnClose","Item","Menu","NavBar","mode","theme","selectedKeys","to","loaderIcon","spin","FullScreenLoader","container","loader","indicator","size","mcqQuestion","questionType","options","v4","label","media","threshold","textQuestion","getQuestion","baseQuestion","questionNo","questionBody","weight","quTags","push","NotFound","React","lazy","VideoQuiz","Routes","fallback","path","exact","Header","Layout","Content","App","Footer","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.4e0eda41.chunk.js","sourcesContent":["import React, { FC, useEffect, useRef } from 'react'\nimport videojs from 'video.js'\n\nconst Player: FC<{ url: string; type: string }> = ({\n  url,\n  type = 'video/mp4',\n}) => {\n  const videoRef = useRef(null)\n  useEffect(() => {\n    if (url && videoRef.current) {\n      const videoJsPlayer = videojs(videoRef.current, {\n        autoplay: false,\n        controls: true,\n        sources: [\n          {\n            src: url,\n            type,\n          },\n        ],\n      })\n      return () => {\n        videoJsPlayer.dispose()\n      }\n    }\n  }, [type, url])\n  return (\n    <div data-vjs-player style={{ height: 500 }}>\n      <video\n        ref={videoRef}\n        className=\"video-js vjs-big-play-centered\"\n        crossOrigin=\"anonymous\"\n      />\n    </div>\n  )\n}\n\nexport default Player\n","import { Tabs } from 'antd'\nimport React, { FC } from 'react'\nimport Player from '../../../components/player/player.component'\n\nimport { DocketType } from '../../../types/qna.types'\nimport styles from './docket.module.scss'\n\nexport type DocketProps = {\n  dockets: DocketType[]\n}\nconst { TabPane } = Tabs\n\nconst RenderType: FC<{ docket: DocketType }> = ({ docket }) => {\n  if (docket.type === 'application/pdf') {\n    return (\n      <embed\n        src={docket.url}\n        type=\"application/pdf\"\n        width=\"100%\"\n        height=\"500px\"\n      />\n    )\n  } else if (docket.type?.startsWith('image')) {\n    return (\n      <div className={styles.center}>\n        <img\n          className={styles.image}\n          src={docket.url}\n          alt={docket.title || 'NA'}\n        />\n      </div>\n    )\n  } else if (docket.type?.startsWith('video')) {\n    return <Player url={docket.url} type={docket.type} />\n  }\n  return null\n}\n\nconst Docket: FC<DocketProps> = ({ dockets }) => {\n  return (\n    <Tabs defaultActiveKey=\"1\">\n      {dockets.map((docket) => (\n        <TabPane key={docket.id} tab={<span>{docket.title || 'NA'}</span>}>\n          <RenderType docket={docket} />\n        </TabPane>\n      ))}\n    </Tabs>\n  )\n}\n\nexport default Docket\n","import Fuse from 'fuse.js'\nimport { QuestionType } from '../../types/qna.types'\nimport { BooleanFilter, QuestionTypeSearch } from './quiz.types'\n\nexport const getFuseInstance = (\n  questions: QuestionType[]\n): Fuse<QuestionType, Fuse.IFuseOptions<any>> =>\n  new Fuse(questions, {\n    includeScore: true,\n    includeMatches: true,\n    // threshold: 0.3,\n    keys: ['questionBody', 'tags'],\n  })\n\nexport const generateQuestionMap = (\n  questions: QuestionType[]\n): Map<string, QuestionType> => {\n  const map = new Map<string, QuestionType>()\n  questions.forEach((question) => {\n    map.set(question.id, question)\n  })\n  return map\n}\n\nexport const getTags = (questions: QuestionType[]): string[] => {\n  const tagSet = new Set<string>()\n  questions.forEach(({ tags }) => {\n    if (Array.isArray(tags) && tags.length) {\n      tags.forEach((tag) => {\n        tagSet.add(tag)\n      })\n    }\n  })\n  return Array.from(tagSet)\n}\n\nexport const filterQuestionBasedOnQuery = (\n  fuseIndex: Fuse<QuestionType, Fuse.IFuseOptions<any>>,\n  questions: QuestionType[],\n  questionMap: Map<string, QuestionType>,\n  query: string\n): QuestionTypeSearch[] => {\n  if (!query) {\n    return questions.map(\n      (q, idx): QuestionTypeSearch => ({\n        item: questionMap.get(q.id) || q,\n        score: 0,\n        refIndex: idx,\n      })\n    )\n  }\n  return fuseIndex.search(query).map((u) => ({\n    score: u.score || -1,\n    refIndex: u.refIndex === undefined ? -1 : u.refIndex,\n    item: questionMap.get(u.item.id) || u.item,\n    matches: u.matches,\n  }))\n}\n\nexport const booleanFilter = (\n  booleanValue: boolean,\n  booleanFilter: BooleanFilter = BooleanFilter.BOTH\n) =>\n  booleanFilter === BooleanFilter.BOTH ||\n  (booleanFilter === BooleanFilter.TRUE && booleanValue) ||\n  (booleanFilter === BooleanFilter.FALSE && !booleanValue)\n\nexport const filterQuestions = (\n  results: QuestionTypeSearch[],\n  tags: string[] = [],\n  filterCritical: BooleanFilter = BooleanFilter.BOTH,\n  filterFlag: BooleanFilter = BooleanFilter.BOTH\n) => {\n  return results.filter(({ item }) => {\n    return (\n      booleanFilter(Boolean(item.isCritical), filterCritical) &&\n      booleanFilter(Boolean(item.flagged), filterFlag) &&\n      (tags.length === 0 || tags.some((tag) => (item.tags || []).includes(tag)))\n    )\n  })\n}\n","import { Modal } from 'antd'\nimport React, {\n  createContext,\n  FC,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport { VideoJsPlayer } from 'video.js'\n\nimport { DocketType, QuestionType } from '../../types/qna.types'\nimport Docket from './docket/docket.component'\nimport { QuestionTypeSearch, SearchFilter } from './quiz.types'\nimport {\n  filterQuestionBasedOnQuery,\n  filterQuestions,\n  generateQuestionMap,\n  getFuseInstance,\n  getTags,\n} from './quiz.utility'\n\nexport type QuizContextValue = {\n  questions: QuestionType[]\n  videoUrl: string\n  tags: string[]\n  activeQuestionId: string\n  setActiveQuestionId: (id: string) => void\n  setModelDocket: (docket: DocketType[], title?: string) => void\n  player: VideoJsPlayer | null\n  setPlayer: React.Dispatch<React.SetStateAction<VideoJsPlayer | null>>\n  answeredCount: number\n  search(filter: SearchFilter): QuestionTypeSearch[]\n  getQuestionById(id: string): QuestionTypeSearch | undefined\n  updateQuestion(id: string, question: QuestionType): void\n  getQuestionsList(): QuestionType[]\n}\n\nconst defaultValue: QuizContextValue = {\n  questions: [],\n  videoUrl: '',\n  tags: [],\n  activeQuestionId: '',\n  player: null,\n  answeredCount: 0,\n  setPlayer: () => undefined,\n  setActiveQuestionId: () => undefined,\n  setModelDocket: () => undefined,\n  search: () => [],\n  getQuestionById: () => undefined,\n  updateQuestion: () => null,\n  getQuestionsList: () => [],\n}\n\nconst QuizContext = createContext<QuizContextValue>(defaultValue)\nconst modalBodyStyle: React.CSSProperties = {\n  padding: '0px 1rem 1rem',\n}\nexport const QuizContextProvider: FC<{\n  questions: QuestionType[]\n  videoUrl: string\n}> = ({ children, questions, videoUrl }) => {\n  // local states\n  const [modelConfig, setModelConfig] = useState<{\n    title: string\n    docket: DocketType[]\n    visible: boolean\n  } | null>(null)\n  // states to pass\n  const [player, setPlayer] = useState<VideoJsPlayer | null>(null)\n  const [activeQuestionId, setActiveQuestionId] = useState(questions[0].id)\n  const [questionMap, setQuestionMap] = useState(generateQuestionMap(questions))\n  const [fuse, tags] = useMemo(() => {\n    return [getFuseInstance(questions), getTags(questions)]\n  }, [questions])\n\n  const getQuestionById = useCallback(\n    (id: string): QuestionTypeSearch | undefined => {\n      const item = questionMap.get(id)\n      if (item) {\n        const refIndex = questions.findIndex((que) => item.id === que.id)\n        return {\n          refIndex,\n          item,\n          score: 1,\n        }\n      }\n    },\n    [questionMap, questions]\n  )\n\n  const updateQuestion = useCallback((id: string, question: QuestionType) => {\n    setQuestionMap((prevMap) => {\n      const map = new Map(prevMap)\n      map.set(id, question)\n      return map\n    })\n  }, [])\n\n  const getQuestionsList = useCallback(() => {\n    return questions.map((question) => questionMap.get(question.id) || question)\n  }, [questions, questionMap])\n\n  const search = useCallback(\n    ({ query = '', filterTags, filterCritical, filterFlag }: SearchFilter) => {\n      const filteredQuestions = filterQuestionBasedOnQuery(\n        fuse,\n        questions,\n        questionMap,\n        query.trim()\n      )\n      return filterQuestions(\n        filteredQuestions,\n        filterTags,\n        filterCritical,\n        filterFlag\n      )\n    },\n    [questions, questionMap, fuse]\n  )\n\n  const setModelDocket = useCallback((docket, title = 'View') => {\n    setModelConfig({\n      title,\n      docket,\n      visible: true,\n    })\n  }, [])\n  const answeredCount = useMemo(() => {\n    return questions.reduce((total, question) => {\n      const withAnswer = questionMap.get(question.id)\n      if (withAnswer && withAnswer.answer) {\n        if (\n          withAnswer.answerType === 'MULTI' &&\n          Array.isArray(withAnswer.answer) &&\n          withAnswer.answer.length\n        ) {\n          return total + 1\n        } else if (\n          withAnswer.answerType === 'SINGLE' &&\n          withAnswer?.answer?.answer\n        ) {\n          return total + 1\n        }\n      }\n      return total\n    }, 0)\n  }, [questions, questionMap])\n  // local methods\n  const closeModal = useCallback(() => {\n    setModelConfig((pre) => (pre ? { ...pre, visible: false } : null))\n  }, [])\n  const afterClosed = useCallback(() => {\n    setModelConfig(null)\n  }, [])\n\n  const value = useMemo(\n    (): QuizContextValue => ({\n      tags,\n      videoUrl,\n      questions,\n      search,\n      getQuestionsList,\n      getQuestionById,\n      updateQuestion,\n      activeQuestionId,\n      setActiveQuestionId,\n      setModelDocket,\n      player,\n      setPlayer,\n      answeredCount,\n    }),\n    [\n      tags,\n      videoUrl,\n      questions,\n      search,\n      getQuestionsList,\n      getQuestionById,\n      updateQuestion,\n      activeQuestionId,\n      setModelDocket,\n      player,\n      answeredCount,\n    ]\n  )\n  return (\n    <QuizContext.Provider value={value}>\n      {children}\n      <Modal\n        title={modelConfig?.title}\n        visible={modelConfig?.visible}\n        footer={null}\n        onCancel={closeModal}\n        afterClose={afterClosed}\n        width=\"80%\"\n        bodyStyle={modalBodyStyle}\n        destroyOnClose\n      >\n        {modelConfig?.docket ? <Docket dockets={modelConfig.docket} /> : null}\n      </Modal>\n    </QuizContext.Provider>\n  )\n}\n\nexport default QuizContext\n","import { Menu } from 'antd'\nimport React, { FC } from 'react'\nimport { Link } from 'react-router-dom'\nconst { Item } = Menu\nconst NavBar: FC<{}> = () => {\n  return (\n    <Menu mode=\"horizontal\" theme=\"dark\" selectedKeys={['/']}>\n      <Item key=\"/\">\n        <Link to=\"/\">Video Audit</Link>\n      </Item>\n    </Menu>\n  )\n}\n\nexport default NavBar\n","import { LoadingOutlined } from '@ant-design/icons/lib'\nimport { Spin } from 'antd'\nimport React, { FC } from 'react'\nimport style from './full-screen-loader.module.scss'\n\nconst loaderIcon = <LoadingOutlined spin />\nexport type FullScreenLoaderProps = {\n  title?: string\n}\nconst FullScreenLoader: FC<FullScreenLoaderProps> = ({ title }) => {\n  return (\n    <div className={style.container}>\n      <div className={style.loader}>\n        <Spin indicator={loaderIcon} size=\"large\" />\n        {title ? <span>{title}</span> : null}\n      </div>\n    </div>\n  )\n}\n\nexport default FullScreenLoader\n","import {\n  DocketType,\n  MultiAnswerType,\n  MultiChoiceQuestionType,\n  QuestionBaseType,\n  QuestionType,\n  SingleAnswerType,\n  TextQuestionType,\n} from '../types/qna.types'\nimport { v4 } from 'uuid'\nimport { docketSampleImage, docketSamplePdf, docketSampleVideo } from './video'\n\nconst mcqQuestion = (): MultiChoiceQuestionType => ({\n  questionType: 'MULTI_CHOICE',\n  options: [\n    {\n      id: v4(),\n      label: 'YES',\n      value: 100,\n      media: false,\n    },\n    {\n      id: v4(),\n      label: 'NO',\n      value: 0,\n      media: true,\n    },\n    {\n      id: v4(),\n      label: 'NA',\n      value: -1,\n      media: false,\n    },\n  ],\n  threshold: 100,\n})\n\nconst textQuestion: TextQuestionType = {\n  questionType: 'TEXT',\n}\nconst tags = {\n  audio: ['Audio Quality'],\n  video: ['Video Quality'],\n  sop: ['SOP Adherence'],\n  info: ['Graphics & Information'],\n  trainer: ['Trainer Grooming'],\n}\nconst getQuestion = (\n  baseQuestion: Partial<QuestionBaseType> & { questionBody: string },\n  questionType: MultiChoiceQuestionType | TextQuestionType = mcqQuestion(),\n  answerType: SingleAnswerType | MultiAnswerType = { answerType: 'MULTI' }\n): QuestionType => ({\n  id: v4(),\n  questionNo: 1,\n  questionBody: '',\n  weight: 1,\n  isCritical: true,\n  tags: [],\n  docket: [],\n  ...baseQuestion,\n  ...questionType,\n  ...answerType,\n})\n\nconst queBody = [\n  `Is the background music loud enough as can be without overpowering the trainer's voice?`,\n  `Is the video and Audio in sync throughout the stream?`,\n  `Are there no awkward edits/ cuts?`,\n  `Are there no continuity issues or glitches?`,\n  `Are the names of the movements correct?`,\n  `Are the timer/movement counts in sync with the workout?`,\n  `Are the names of the movements easy to understand, and with proper instructions on how to come down to the postures?`,\n  `Do the movements in the class stream match the movements mentioned in the details of the workout page?`,\n  `Is the video not blurry and with continuity in video flow?`,\n  `Does the session have a warm up and a cool down routine?`,\n  `Is the video resolution between 480p - 1080p?`,\n  `Is the trainer audible, maintaining an optimum pace of speech, speaking in a good tone, and is loud enough?`,\n  `Is the video under 2 GB ?`,\n  `Is the trainer in focus throughout the video?`,\n  `Is the location in the background of the video clean,and without any un-necessary items?`,\n  `Is the logo and branding clearly visible in the video and is not blocked by the energy meter or other feature displays?`,\n  `Is no other language used except Hindi / English?`,\n  `There is no irrelevant sound or ambient noise coming from the background of the video such as doorbell, TV?`,\n  `Is there no awkward or disturbing lighting in the background of the video?`,\n  `Is there a disclaimer at the beginning of the video?`,\n  `Is the lighting optimum?`,\n  `Is the mat, water bottle and other equipment clearly visible in the video?`,\n  `Was the trainer in proper attire( wearing shoes, Hair tied(females) and well groomed?`,\n]\nconst quTags = [\n  'Audio Quality',\n  'Video Quality',\n  'Video Quality',\n  'Video Quality',\n  'SOP Adherence',\n  'SOP Adherence',\n  'SOP Adherence',\n  'SOP Adherence',\n  'Video Quality',\n  'SOP Adherence',\n  'Video Quality',\n  'Audio Quality',\n  'Video Quality',\n  'Video Quality',\n  'Video Quality',\n  'Graphics & Information',\n  'SOP Adherence',\n  'Audio Quality',\n  'Video Quality',\n  'Graphics & Information',\n  'Visibility',\n  'Visibility',\n  'Trainer Grooming',\n]\n\nconst questions: QuestionType[] = queBody.map((questionBody, idx) =>\n  getQuestion({\n    questionNo: idx + 1,\n    questionBody,\n    tags: [quTags[idx]],\n  })\n)\nquestions.push(\n  getQuestion(\n    {\n      questionNo: questions.length,\n      questionBody: 'Anomaly at any timestamp',\n      tags: ['Audio Quality', 'Video Quality'],\n    },\n    textQuestion\n  )\n)\n\nquestions.push(\n  getQuestion(\n    {\n      questionNo: questions.length,\n      questionBody: 'Has any overall Anomaly in video',\n    },\n    mcqQuestion(),\n    { answerType: 'SINGLE' }\n  )\n)\n\nquestions.push(\n  getQuestion(\n    {\n      questionNo: questions.length,\n      questionBody: 'Any Overall Additional feedback',\n    },\n    textQuestion,\n    { answerType: 'SINGLE' }\n  )\n)\n\nconst dockets: DocketType[] = [\n  {\n    id: v4(),\n    title: 'Sample Image',\n    url: docketSampleImage,\n    type: 'image/jpeg',\n  },\n  {\n    id: v4(),\n    title: 'Sample PDF',\n    url: docketSamplePdf,\n    type: 'application/pdf',\n  },\n  {\n    id: v4(),\n    title: 'Sample Video',\n    url: docketSampleVideo,\n    type: 'video/mp4',\n  },\n]\n\nquestions[0].docket = dockets\n\nexport default questions\n","// export const mainSampleVideo = `/sample/main-video.mp4`\n// export const docketSampleVideo = `/sample/docket-video.mp4`\n// export const docketSamplePdf = `/sample/docket-pdf.pdf`\n// export const docketSampleImage = `/sample/docket-image.jpg`\n\nexport const mainSampleVideo = `https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4`\n\nexport const docketSampleVideo = `https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4`\nexport const docketSamplePdf = `/sample/docket-pdf.pdf`\nexport const docketSampleImage = `/sample/docket-image.jpg`\n","import React from 'react'\n\nconst NotFound = React.lazy(() => import('./not-found.component'))\n\nexport default NotFound\n","import React from 'react'\nconst VideoQuiz = React.lazy(() => import('./video-quiz.component'))\n\nexport default VideoQuiz\n","import React, { FC, Suspense } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport FullScreenLoader from '../components/full-screen-loader/full-screen-loader.component'\nimport questions from '../constants/question.constant'\nimport { mainSampleVideo } from '../constants/video'\nimport { QuizContextProvider } from '../modules/quiz/quiz.context'\nimport NotFound from './not-found/not-found.index'\nimport VideoQuiz from './video-quiz/video-quiz.index'\n\nconst Routes: FC<{}> = () => {\n  return (\n    <Suspense fallback={<FullScreenLoader />}>\n      <Switch>\n        <Route path=\"/\" exact>\n          <QuizContextProvider videoUrl={mainSampleVideo} questions={questions}>\n            <VideoQuiz />\n          </QuizContextProvider>\n        </Route>\n        <Route>\n          <NotFound />\n        </Route>\n      </Switch>\n    </Suspense>\n  )\n}\n\nexport default Routes\n","import { Layout } from 'antd'\nimport React, { FC } from 'react'\nimport { BrowserRouter } from 'react-router-dom'\nimport NavBar from './components/nav-bar/nav-bar.component'\n\nimport Routes from './routes/routes.component'\n\nconst { Header, Content, Footer } = Layout\nconst App: FC<{}> = () => {\n  return (\n    <BrowserRouter>\n      <Layout>\n        <Header>\n          <NavBar />\n        </Header>\n        <Content>\n          <Routes />\n        </Content>\n        {/*<Footer className=\"text-center\">*/}\n        {/*  Video Audit &copy; Sujeet Kumar Jaiswal*/}\n        {/*</Footer>*/}\n      </Layout>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './app.component'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import Fuse from 'fuse.js'\nimport { QuestionType } from '../../types/qna.types'\n\nexport type QuestionTypeSearch = {\n  item: QuestionType\n  score: number\n  refIndex: number\n  matches?: readonly Fuse.FuseResultMatch[]\n}\n\nexport enum BooleanFilter {\n  TRUE = 'TRUE',\n  FALSE = 'FALSE',\n  BOTH = 'BOTH',\n}\n\nexport type SearchFilter = {\n  query?: string\n  filterTags?: string[]\n  filterCritical?: BooleanFilter\n  filterFlag?: BooleanFilter\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"full-screen-loader_container__3w1Ml\",\"loader\":\"full-screen-loader_loader__2_qhu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"center\":\"docket_center__3cRSq\",\"image\":\"docket_image__2YWsp\"};"],"sourceRoot":""}